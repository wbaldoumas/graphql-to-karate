scalar DateTime

type Query {
  userById(id: ID!): User!
  blogPostById(id: ID!): BlogPost!
  commentById(id: ID!): Comment!
  users(pageInfo: PageInfoInput): UserConnection!
  blogPosts(pageInfo: PageInfoInput): BlogPostConnection!
  comments(pageInfo: PageInfoInput): CommentConnection!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
}

enum UserRole {
  GUEST
  STANDARD
  ADMINISTRATOR
}

interface Node {
  id: ID!
}

type User implements Node {
  name: String!
  role: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
}

type BlogPost implements Node {
  title: String!
  content: String!
  author: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
}

type Comment implements Node {
  content: String!
  author: User!
  blogPost: BlogPost!
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalCount: Int!
}

type UserConnection {
  nodes: [User!]!
  pageInfo: PageInfo!
}

type BlogPostConnection {
  nodes: [BlogPost!]!
  pageInfo: PageInfo!
}

type CommentConnection {
  nodes: [Comment!]!
  pageInfo: PageInfo!
}

input UpdateUserInput {
  id: String!
  name: String!
  role: UserRole!
}

input CreateUserInput {
  name: String!
  password: String!
  role: UserRole!
}

input PageInfoInput {
  limit: Int
  offset: Int
}

schema {
  query: Query
  mutation: Mutation
}
